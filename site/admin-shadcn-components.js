/**
 * shadcn/ui Component Enhancements for Admin Panel
 * –£–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
import { cn, showToast, createBadge, createButton, createSkeleton } from './shadcn-utils.js';

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è shadcn/ui –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
 */
export function initAdminShadcnComponents() {
  console.log('üé® Initializing shadcn/ui components for admin panel...');

  // –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ shadcn/ui —Å—Ç–∏–ª—å
  enhanceButtons();
  
  // –£–ª—É—á—à–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
  enhanceTables();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
  addPageTransitions();
  
  // –£–ª—É—á—à–∞–µ–º —Å—Ç–∞—Ç—É—Å-–±–µ–π–¥–∂–∏
  enhanceStatusBadges();

  console.log('‚úÖ shadcn/ui components initialized!');
}

/**
 * –£–ª—É—á—à–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è—è –∫–ª–∞—Å—Å—ã shadcn/ui
 */
function enhanceButtons() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  document.querySelectorAll('button[type="submit"], .primary-action').forEach(btn => {
    if (!btn.classList.contains('admin-btn')) {
      btn.classList.add('admin-btn', 'admin-btn-primary');
    }
  });

  // –í—Ç–æ—Ä–∏—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  document.querySelectorAll('.secondary-action, button[type="button"]:not(.admin-btn)').forEach(btn => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (!btn.closest('#admin-nav') && !btn.classList.contains('admin-btn')) {
      btn.classList.add('admin-btn', 'admin-btn-secondary');
    }
  });

  // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è/–æ–ø–∞—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  document.querySelectorAll('.delete-btn, .danger-action, button[data-action="delete"]').forEach(btn => {
    if (!btn.classList.contains('admin-btn')) {
      btn.classList.add('admin-btn', 'admin-btn-danger', 'admin-btn-sm');
    }
  });

  // –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  document.querySelectorAll('.edit-btn, button[data-action="edit"]').forEach(btn => {
    if (!btn.classList.contains('admin-btn')) {
      btn.classList.add('admin-btn', 'admin-btn-outline', 'admin-btn-sm');
    }
  });
}

/**
 * –£–ª—É—á—à–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã
 */
function enhanceTables() {
  document.querySelectorAll('table').forEach(table => {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å admin-table
    if (!table.classList.contains('admin-table')) {
      table.classList.add('admin-table');
    }

    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–±–µ—Ä–Ω—É—Ç–∞
    if (!table.parentElement.classList.contains('admin-table-container')) {
      const container = document.createElement('div');
      container.className = 'admin-table-container';
      table.parentElement.insertBefore(container, table);
      container.appendChild(table);
    }
  });
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
 */
function addPageTransitions() {
  const sections = document.querySelectorAll('.admin-section');
  
  sections.forEach(section => {
    // –î–æ–±–∞–≤–ª—è–µ–º observer –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.style.animation = 'fadeIn 0.3s ease-in-out';
        }
      });
    }, { threshold: 0.1 });

    observer.observe(section);
  });
}

/**
 * –£–ª—É—á—à–∞–µ—Ç status badges
 */
function enhanceStatusBadges() {
  // –°—Ç–∞—Ç—É—Å—ã –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤
  const statusMap = {
    '–¥–æ—Å—Ç—É–ø–µ–Ω': 'success',
    'available': 'success',
    '–≤ –∞—Ä–µ–Ω–¥–µ': 'info',
    'rented': 'info',
    '–Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏': 'warning',
    'maintenance': 'warning',
    '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω': 'danger',
    'unavailable': 'danger'
  };

  document.querySelectorAll('[data-status], .status, .bike-status').forEach(element => {
    const status = element.textContent.toLowerCase().trim();
    const variant = statusMap[status] || 'neutral';
    
    if (!element.classList.contains('status-badge')) {
      element.className = `status-badge ${variant}`;
    }
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç skeleton loader –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
 */
export function showTableSkeleton(tableBody, rows = 5, cols = 6) {
  tableBody.innerHTML = '';
  
  for (let i = 0; i < rows; i++) {
    const tr = document.createElement('tr');
    
    for (let j = 0; j < cols; j++) {
      const td = document.createElement('td');
      const skeleton = createSkeleton({ 
        height: '20px',
        width: j === 0 ? '80px' : '100%'
      });
      td.appendChild(skeleton);
      tr.appendChild(td);
    }
    
    tableBody.appendChild(tr);
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç toast —Å —É—Å–ø–µ—à–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
 */
export function showSuccessToast(message = '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã') {
  showToast({
    title: '–£—Å–ø–µ—Ö!',
    description: message,
    variant: 'success',
    duration: 3000
  });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç toast —Å –æ—à–∏–±–∫–æ–π
 */
export function showErrorToast(message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞') {
  showToast({
    title: '–û—à–∏–±–∫–∞',
    description: message,
    variant: 'destructive',
    duration: 5000
  });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç toast —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
export function showInfoToast(message) {
  showToast({
    title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    description: message,
    variant: 'info',
    duration: 3000
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
 */
export function createDashboardStatCard({ label, value, icon, variant = 'info', onClick }) {
  const card = document.createElement('div');
  card.className = 'dashboard-stat-card';
  
  if (onClick) {
    card.style.cursor = 'pointer';
    card.addEventListener('click', onClick);
  }

  const statInfo = document.createElement('div');
  statInfo.className = 'stat-info';

  const statLabel = document.createElement('div');
  statLabel.className = 'stat-label';
  statLabel.textContent = label;

  const statValue = document.createElement('div');
  statValue.className = 'stat-value';
  statValue.textContent = value;

  statInfo.appendChild(statLabel);
  statInfo.appendChild(statValue);

  const statIcon = document.createElement('div');
  statIcon.className = `stat-icon ${variant}`;
  statIcon.textContent = icon || 'üìä';

  card.appendChild(statInfo);
  card.appendChild(statIcon);

  return card;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç empty state –¥–ª—è –ø—É—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü
 */
export function createEmptyState({ icon = 'üì≠', title, description, actionText, onAction }) {
  const container = document.createElement('div');
  container.className = 'empty-state';

  const iconEl = document.createElement('div');
  iconEl.className = 'empty-state-icon';
  iconEl.textContent = icon;

  const titleEl = document.createElement('div');
  titleEl.className = 'empty-state-title';
  titleEl.textContent = title;

  const descEl = document.createElement('div');
  descEl.className = 'empty-state-description';
  descEl.textContent = description;

  container.appendChild(iconEl);
  container.appendChild(titleEl);
  container.appendChild(descEl);

  if (actionText && onAction) {
    const btn = createButton({
      text: actionText,
      variant: 'primary',
      onClick: onAction
    });
    container.appendChild(btn);
  }

  return container;
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç loading state –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
 */
export function showLoadingState(container, message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
  const loadingDiv = document.createElement('div');
  loadingDiv.className = 'loading-container';
  loadingDiv.innerHTML = `
    <div class="loading-spinner"></div>
    <div style="color: var(--admin-text-secondary); font-size: 0.9375rem;">${message}</div>
  `;
  
  container.innerHTML = '';
  container.appendChild(loadingDiv);
}

/**
 * –ê–Ω–∏–º–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ (—Å—á–µ—Ç—á–∏–∫)
 */
export function animateNumber(element, start, end, duration = 1000) {
  const range = end - start;
  const increment = range / (duration / 16); // 60fps
  let current = start;

  const timer = setInterval(() => {
    current += increment;
    if ((increment > 0 && current >= end) || (increment < 0 && current <= end)) {
      current = end;
      clearInterval(timer);
    }
    element.textContent = Math.floor(current);
  }, 16);
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç ripple —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É
 */
export function addRippleEffect(button) {
  button.style.position = 'relative';
  button.style.overflow = 'hidden';

  button.addEventListener('click', function(e) {
    const ripple = document.createElement('span');
    const rect = button.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    const x = e.clientX - rect.left - size / 2;
    const y = e.clientY - rect.top - size / 2;

    ripple.style.cssText = `
      position: absolute;
      width: ${size}px;
      height: ${size}px;
      left: ${x}px;
      top: ${y}px;
      background: rgba(255, 255, 255, 0.5);
      border-radius: 50%;
      transform: scale(0);
      animation: ripple 0.6s ease-out;
      pointer-events: none;
    `;

    button.appendChild(ripple);

    setTimeout(() => ripple.remove(), 600);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  if (!document.getElementById('ripple-animation-style')) {
    const style = document.createElement('style');
    style.id = 'ripple-animation-style';
    style.textContent = `
      @keyframes ripple {
        to {
          transform: scale(4);
          opacity: 0;
        }
      }
    `;
    document.head.appendChild(style);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç confirm dialog –≤ —Å—Ç–∏–ª–µ shadcn/ui
 */
export function showConfirmDialog({ title, description, confirmText = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', cancelText = '–û—Ç–º–µ–Ω–∞', onConfirm, onCancel }) {
  return new Promise((resolve) => {
    const overlay = document.createElement('div');
    overlay.className = 'modal-overlay';
    overlay.style.zIndex = '10000';

    const modal = document.createElement('div');
    modal.className = 'modal-content';
    modal.style.maxWidth = '450px';

    modal.innerHTML = `
      <div class="modal-header">
        <h3>${title}</h3>
      </div>
      <div class="modal-body">
        <p style="color: var(--admin-text-secondary); line-height: 1.6;">${description}</p>
      </div>
      <div class="modal-footer">
        <button class="admin-btn admin-btn-outline" id="confirm-cancel">${cancelText}</button>
        <button class="admin-btn admin-btn-primary" id="confirm-ok">${confirmText}</button>
      </div>
    `;

    overlay.appendChild(modal);
    document.body.appendChild(overlay);

    const handleClose = (confirmed) => {
      overlay.classList.add('animate-fade-out');
      setTimeout(() => {
        overlay.remove();
      }, 200);

      if (confirmed && onConfirm) onConfirm();
      if (!confirmed && onCancel) onCancel();
      resolve(confirmed);
    };

    modal.querySelector('#confirm-ok').addEventListener('click', () => handleClose(true));
    modal.querySelector('#confirm-cancel').addEventListener('click', () => handleClose(false));
    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) handleClose(false);
    });
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ admin.js
if (typeof window !== 'undefined') {
  window.adminShadcn = {
    initAdminShadcnComponents,
    showTableSkeleton,
    showSuccessToast,
    showErrorToast,
    showInfoToast,
    createDashboardStatCard,
    createEmptyState,
    showLoadingState,
    animateNumber,
    addRippleEffect,
    showConfirmDialog
  };
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initAdminShadcnComponents);
} else {
  initAdminShadcnComponents();
}

